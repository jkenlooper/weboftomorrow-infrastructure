AWSTemplateFormatVersion: "2010-09-09"

Description: >
  A static site backed by CloudFront CDN. Uses a blue-green deployment via two
  origins in an origin group. The origins can be swapped when needing to revert
  a blue-green deployment.

Metadata:
  Author: Jake Hickenlooper
  "AWS::Cloudformation::Interface":
    ParameterGroups:
      -
        Label: Blue-Green Deployment
        Parameters:
          - BlueVersion
          - GreenVersion
      -
        Label: Project Settings
        Parameters:
          - ProjectSlug
          - SecretHeaderString
          - HostedZoneId

Parameters:
  ProjectSlug:
    Type: String
    Description: >
      A one word name of the project. Will be used for root object name in
      buckets and other places. The Parameter Store in AWS Systems Manager will
      use this as the prefix (like /weboftomorrow/) for parameters.
    Default: "weboftomorrow"
    AllowedPattern: "[a-z0-9]+"
    MinLength: 3
    MaxLength: 50
  BlueVersion:
    Type: String
    Description: >
      A version number for the existing production site that will be replaced.
    Default: "0.8.1"
  GreenVersion:
    Type: String
    Description: >
      A version number for the new production site that will be deployed.
    Default: "0.8.2"

  SecretHeaderString:
    Type: String
    Description: >
      Secret string in the Referer header that CloudFront will use when
      accessing files from the S3 bucket. This blocks direct public access of
      the static sites bucket unless the Referer header with this string is
      used.
    Default: "None shall pass."

  HostedZoneId:
    Type: 'AWS::Route53::HostedZone::Id'
    Description: An Amazon Route 53 hosted zone ID, such as Z23YXV4OVPL04A.
    AllowedPattern: ".+"

Resources:

  StaticSiteFiles:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: !Sub "${ProjectSlug}/error.html"
        IndexDocument: 'index.html'
        # TODO: Implement routing rules for objects that have moved?
        #RoutingRules:
        #  -
        #    RoutingRuleCondition:
        #      HttpErrorCodeReturnedEquals: "404"
        #      KeyPrefixEquals: !Sub "${ProjectSlug}/this/object/no-longer-exists.jpg"
        #    RedirectRule:
        #      ReplaceKeyWith: !Sub "${ProjectSlug}/${GreenVersion}/this/object/is-now-here.jpg"
      LifecycleConfiguration:
        Rules:
          -
            Id: drop-stage-files
            ExpirationInDays: 7
            Prefix: !Sub "${ProjectSlug}/stage"
            Status: Enabled

  StaticSiteFilesPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Bucket: !Ref StaticSiteFiles
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action: "s3:GetObject"
            Effect: "Allow"
            Principal: "*"
            Resource:
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/stage"
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/stage/*"
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/production"
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/production/*"
            Condition:
              StringLike:
                "aws:referer": !Ref SecretHeaderString
          -
            Action:
              - "s3:DeleteObject"
            Effect: "Deny"
            Principal: "*"
            Resource:
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/production/${BlueVersion}/*"
              - !Sub "${StaticSiteFiles.Arn}/${ProjectSlug}/production/${GreenVersion}/*"
          -
            Action:
              - "s3:GetObject"
              - "s3:DeleteObject"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::ImportValue: !Sub "${ProjectSlug}-CleanupLambdaRoleArn"
              #AWS: !ImportValue "${ProjectSlug}-CleanupLambdaRoleArn"
              #AWS: Fn::GetAtt: [ !ImportValue "${ProjectSlug}-CleanupLambdaRole", "Arn" ]
              #AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/weboftomorrow-CleanupLambdaRole"
            Resource:
              - !Sub "arn:aws:s3:::${StaticSiteFiles}/${ProjectSlug}/production"
              - !Sub "arn:aws:s3:::${StaticSiteFiles}/${ProjectSlug}/production/*"
          -
            Action:
              - "s3:ListBucket"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::ImportValue: !Sub "${ProjectSlug}-CleanupLambdaRoleArn"
              #AWS: !ImportValue "${ProjectSlug}-CleanupLambdaRoleArn"
              #AWS: Fn::GetAtt: [ !ImportValue "${ProjectSlug}-CleanupLambdaRole", "Arn" ]
              #AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/weboftomorrow-CleanupLambdaRole"
            Resource:
              - !Sub "arn:aws:s3:::${StaticSiteFiles}"

  CloudFrontProduction:
    Type: 'AWS::CloudFront::Distribution'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DistributionConfig:
        Comment: >
          The origins in the origin group can be swapped when reverting the
          blue-green deployment.
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: "blue-green-failover"
          # Managed-CachingOptimized
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_All
        OriginGroups:
          Items:
            -
              Id: "blue-green-failover"
              FailoverCriteria:
                StatusCodes:
                  Items:
                    - 404
                  Quantity: 1
              Members:
                Items:
                  -
                    OriginId: "green"
                  -
                    OriginId: "blue"
                Quantity: 2
          Quantity: 2
        Origins:
          -
            Id: "blue"
            CustomOriginConfig:
              # The S3 static website is only accessible via http
              OriginProtocolPolicy: http-only
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/production/${BlueVersion}"
          -
            Id: "green"
            CustomOriginConfig:
              # The S3 static website is only accessible via http
              OriginProtocolPolicy: http-only
            DomainName: !Select [1, !Split ["://", !GetAtt StaticSiteFiles.WebsiteURL]]
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/production/${GreenVersion}"
        #
        # TODO: cleanup llama should invalidate caches OR max-age should be set
        # on index.html paths.
        #CacheBehaviors:
        #  -
        #    PathPattern: '*/index.html'
        #    TargetOriginId: "blue-green-failover"
        #    ViewerProtocolPolicy: redirect-to-https
        #    # Managed-CachingDisabled
        #    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
        #  -
        #    PathPattern: '*/'
        #    TargetOriginId: "blue-green-failover"
        #    ViewerProtocolPolicy: redirect-to-https
        #    # Managed-CachingDisabled
        #    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
        #  -
        #    PathPattern: 'index.html'
        #    TargetOriginId: "blue-green-failover"
        #    ViewerProtocolPolicy: redirect-to-https
        #    # Managed-CachingDisabled
        #    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
        #  -
        #    PathPattern: '/'
        #    TargetOriginId: "blue-green-failover"
        #    ViewerProtocolPolicy: redirect-to-https
        #    # Managed-CachingDisabled
        #    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"

  StaticSiteDomainProduction:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.weboftomorrow.com.
      Type: A
      AliasTarget:
        # Z2FDTNDATAQYW2 is the hosted zone id of cloudfront domain name.
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !Sub "http://${CloudFrontProduction.DomainName}"

Outputs:
  ProductionWebsiteURL:
    Value: !Ref StaticSiteDomainProduction
  StaticSiteFilesBucketName:
    Value: !Ref StaticSiteFiles
    Export:
      Name: !Sub "${ProjectSlug}-StaticSiteFilesBucketName"
