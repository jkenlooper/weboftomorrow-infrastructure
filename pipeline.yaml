AWSTemplateFormatVersion: "2010-09-09"
#Transform: "AWS::Serverless-2016-10-31"

Description: >
  Pipeline to deploy changes for the blue-green static site stack.

Metadata:
  Author: Jake Hickenlooper

Parameters:
  ProjectSlug:
    Type: String

  GitBranchToBuildFrom:
    Type: String
    #Default: "release"
    #Description: >
    #  This is the branch that will be checked out when building the static.zip.
    #  It is also used when running the code build integration spec.
  PatternToTriggerBuild:
    Type: String
    #Default: "^refs/heads/release"
    #Description: >
    #  Set the git branch or tags pattern that will trigger a build.

  SecretHeaderString:
    Type: String

Resources:

  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub "${ProjectSlug}-cwe-pipeline-execution"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${StaticPipeline}"

  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              -
                Fn::ImportValue: "root-ArtifactBucket"
            key:
              - !Sub "${ProjectSlug}/StaticBuild/static.zip"
      Targets:
        -
          Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${StaticPipeline}"
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: !Sub "${ProjectSlug}-codepipeline-AppPipeline"

  StaticBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
              - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !Sub "${ProjectSlug}-StaticBuildRole"
  # TODO: may need to output the StaticBuildRole.Arn in order to
  # manually update the bucket policy in ArtifactBucket

  StaticBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ProjectSlug}-StaticBuildPolicy"
      Roles:
        - !Ref StaticBuildRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectSlug}/*"
            Action:
              - "ssm:GetParameters"
          -
            Effect: Allow
            Action:
              - "s3:PutObject"
            Resource:
              - !Sub
                  - "arn:aws:s3:::${artifactBucket}/${ProjectSlug}/StaticBuild/*"
                  -
                    artifactBucket:
                      Fn::ImportValue: "root-ArtifactBucket"
          -
            Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:${ProjectSlug}-StaticBuild:log-stream:*"
              - !Sub "arn:aws:logs:*:691611515789:log-group:${ProjectSlug}-StaticBuild"

  StaticBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-StaticBuild"
      Artifacts:
        Type: S3
        Location:
          Fn::ImportValue: "root-ArtifactBucket"
        Path: !Ref ProjectSlug
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticBuild"
          Status: ENABLED
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: GIT_BRANCH
            Type: PLAINTEXT
            Value: !Ref GitBranchToBuildFrom
      QueuedTimeoutInMinutes: 10
      ServiceRole: !GetAtt StaticBuildRole.Arn
      Source:
        Auth:
          Type: OAUTH
        # GitCloneDepth set to 0 to support git submodule checkout
        GitCloneDepth: 0
        Location:
          Fn::ImportValue: !Sub "${ProjectSlug}-GitHubCloneURL"
        Type: GITHUB
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true
        FilterGroups:
          -
            -
              Type: EVENT
              Pattern: PUSH
              ExcludeMatchedPattern: false
            -
              ExcludeMatchedPattern: false
              Pattern: !Ref PatternToTriggerBuild
              Type: HEAD_REF

  StaticTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
              - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !Sub "${ProjectSlug}-StaticTestRole"

  StaticTestPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ProjectSlug}-StaticTestPolicy"
      Roles:
        - !Ref StaticTestRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:${ProjectSlug}-StaticTest:log-stream:*"
              - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:${ProjectSlug}-StaticTest"

  StaticTest:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-StaticTest"
      ServiceRole: !GetAtt StaticTestRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: STAGING_URL
            Type: PLAINTEXT
            Value: !Sub "http://${CloudFrontStaging.DomainName}"
          -
            Name: GIT_BRANCH
            Type: PLAINTEXT
            Value: !Ref GitBranchToBuildFrom
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-integration.yml
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticTest"
          Status: ENABLED

  SyncGreenToBlue:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-SyncGreenToBlue"
      ServiceRole:
        Fn::ImportValue: "root-S3UpdateWebsiteProductionRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: PROJECT_SLUG
            Type: PLAINTEXT
            Value: !Ref ProjectSlug
          -
            Name: STATIC_SITE_FILES_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-StaticWebsiteBucket"
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            variables:
              STATIC_SITE_FILES_BUCKET: ""
          phases:
            build:
              commands:
                - BLUE_VERSION=$(jq -r '.[] | select(.ParameterKey == "BlueVersion") | .ParameterValue' parameters.json)
                - GREEN_VERSION=$(jq -r '.[] | select(.ParameterKey == "GreenVersion") | .ParameterValue' parameters.json)
                # Get the old green version if there is one; otherwise use new BLUE_VERSION
                - >
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/GREEN_VERSION \
                      OG \
                      || echo "${BLUE_VERSION}" > OG
                - OLD_GREEN_VERSION=$(cat OG)
                - echo $OLD_GREEN_VERSION
                # sync old green version to new blue version (if different)
                - >
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${OLD_GREEN_VERSION} \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}
                # sync old green version to new green version (if different)
                - >
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${OLD_GREEN_VERSION} \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-SyncGreenToBlue"
          Status: ENABLED

  DeployGreenVersion:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-DeployGreenVersion"
      ServiceRole:
        Fn::ImportValue: "root-S3UpdateWebsiteProductionRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: PROJECT_SLUG
            Type: PLAINTEXT
            Value: !Ref ProjectSlug
          -
            Name: STATIC_SITE_FILES_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-StaticWebsiteBucket"
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            variables:
              STATIC_SITE_FILES_BUCKET: ""
          phases:
            install:
              commands:
                #- apt-get update
                - apt-get --yes install jq
            build:
              commands:
                - BLUE_VERSION=$(jq -r '.[] | select(.ParameterKey == "BlueVersion") | .ParameterValue' parameters.json)
                - GREEN_VERSION=$(jq -r '.[] | select(.ParameterKey == "GreenVersion") | .ParameterValue' parameters.json)
                - SOURCE_VERSION=$(jq -r '.version' package.json)
                - >
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/VERSION \
                      VERSION
                - VERSION=$(cat VERSION)
                - >
                    if [ $SOURCE_VERSION != $VERSION ]; then \
                      echo "Version in package.json ($SOURCE_VERSION) does not match VERSION file ($VERSION)";
                      exit 1;
                    else
                      echo "Deploying version $VERSION";
                    fi
                # sync deployed version to new green version and delete old
                # existing files in destination if not in source
                - >
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION} \
                      --delete
                # Set the new green version file for use by future updates
                - echo "${GREEN_VERSION}" > NG
                - >
                  aws s3 cp \
                    NG \
                    s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/GREEN_VERSION
                # Clean up by removing yellow
                - >
                    aws s3 rm \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      --recursive \
                      --only-show-errors
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-DeployGreenVersion"
          Status: ENABLED
#
#  ManualVerificationTopic:
#    Type: AWS::SNS::Topic
#    Properties:
#      DisplayName: !Sub "${ProjectSlug}-ManualVerificationTopic"
#      Subscription:
#        -
#          Protocol: email
#          Endpoint:
#            Fn::ImportValue: !Sub "${ProjectSlug}-ManualVerificationEmail"
#
  StaticPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
              - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !Sub "${ProjectSlug}-StaticPipelineRole"

  StaticPipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${ProjectSlug}-StaticPipelinePolicy"
      Roles:
        - !Ref StaticPipelineRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:GetBucketVersioning
            Resource:
              - !Sub
                  - "arn:aws:s3:::${artifactBucket}/${ProjectSlug}/StaticBuild/*"
                  -
                    artifactBucket:
                      Fn::ImportValue: "root-ArtifactBucket"
          -
            Effect: Allow
            Action:
              - s3:ListBucketVersions
              - s3:ListBucket
              - s3:GetBucketVersioning
            Resource:
              - !Sub
                  - "arn:aws:s3:::${artifactBucket}"
                  -
                    artifactBucket:
                      Fn::ImportValue: "root-ArtifactBucket"
          -
            Effect: Allow
            Action:
              - "s3:PutObject"
            Resource:
              - !Sub
                  - "arn:aws:s3:::${artifactBucket}/tmp-${ProjectSlug}-StaticPipeline/*"
                  -
                    artifactBucket:
                      Fn::ImportValue: "root-ArtifactBucket"
          - Action:
              - cloudwatch:*
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          -
            Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:${ProjectSlug}-StaticPipeline:log-stream:*"
              - !Sub "arn:aws:logs:*:691611515789:log-group:${ProjectSlug}-StaticPipeline"

          # codepipeline somehow needs most if not all of the below permissions.
          - Action:
            - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                - cloudformation.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetRepository
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplication
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
            - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
            - elasticbeanstalk:*
            - ec2:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
            - opsworks:CreateDeployment
            - opsworks:DescribeApps
            - opsworks:DescribeCommands
            - opsworks:DescribeDeployments
            - opsworks:DescribeInstances
            - opsworks:DescribeStacks
            - opsworks:UpdateApp
            - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:UpdateStack
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:ExecuteChangeSet
            - cloudformation:SetStackPolicy
            - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            - codebuild:BatchGetBuildBatches
            - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
            - servicecatalog:ListProvisioningArtifacts
            - servicecatalog:CreateProvisioningArtifact
            - servicecatalog:DescribeProvisioningArtifact
            - servicecatalog:DeleteProvisioningArtifact
            - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
            - ecr:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - states:DescribeExecution
            - states:DescribeStateMachine
            - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action:
            - appconfig:StartDeployment
            - appconfig:StopDeployment
            - appconfig:GetDeployment
            Resource: "*"




  StaticPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue: "root-ArtifactBucket"
      Name: !Sub "tmp-${ProjectSlug}-StaticPipeline"
      RoleArn: !GetAtt StaticPipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                # static.zip here is the GreenVersion
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/static.zip"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact"
              OutputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/source.zip"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact-source"
              OutputArtifacts:
                - Name: sourceZip
              RunOrder: 2
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/parameters.json"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact-parameters"
              OutputArtifacts:
                - Name: parametersJSON
              RunOrder: 2
        -
          Name: Stage
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
                ObjectKey: !Sub "${ProjectSlug}/stage"
                Extract: true
              Name: "StaticBuild-stage"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1

            # TODO: skipping for now
            #-
            #  ActionTypeId:
            #    Category: Test
            #    Owner: AWS
            #    Provider: CodeBuild
            #    Version: "1"
            #  Configuration:
            #    ProjectName: !Ref StaticTest
            #  Name: "StaticTest-stage"
            #  InputArtifacts:
            #    - Name: sourceZip
            #  RunOrder: 2
        #    -
        #      ActionTypeId:
        #        Category: Approval
        #        Owner: AWS
        #        Provider: Manual
        #        Version: "1"
        #      Configuration:
        #        CustomData: |
        #          Review the staging website before pushing change to
        #          production.
        #        ExternalEntityLink: !Sub "http://${CloudFrontStaging.DomainName}"
        #        NotificationArn: !Ref ManualVerificationTopic
        #      Name: "approval-stage"
        #      RunOrder: 3
        -
          Name: Prep
          Actions:
            -
              Name: "SyncGreenToBlue"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: sourceZip
              Configuration:
                ProjectName: !Ref SyncGreenToBlue
              RunOrder: 1
        -
          Name: Deploy
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
                ObjectKey: !Sub "${ProjectSlug}/production"
                Extract: true
              Name: "StaticBuild-deploy"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              Name: "StaticBuild-deploy-version"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: sourceZip
              Configuration:
                ProjectName: !Ref DeployGreenVersion
              RunOrder: 2

        #    #TODO: Invoke a lambda to set custom headers
        #    # index.html Cache-Control: max-age=0, s-max-age=300
        #    #
        #    # media/* and root/* Cache-Control: max-age=0, s-max-age=604800
        #    #   Deployment will invalidate /media/* path and each file in root/
        #    #   (/robots.txt, humans.txt, favicon.ico)
        #    #   Browser clients must revalidate each time
        #    #
        #    # theme/* Cache-Control: public, max-age=604800, immutable
        #    #   Any files in theme have version as part of the path (/theme/0.0.1/*) and
        #    #   are immutable.

        #-
        #  Name: Cleanup
        #  Actions:
        #    -
        #      Name: "Cleanup-Lambda"
        #      ActionTypeId:
        #        Category: Invoke
        #        Owner: AWS
        #        Provider: Lambda
        #        Version: "1"
        #      InputArtifacts:
        #        - Name: sourceZip
        #        - Name: staticZip
        #        - Name: parametersJSON
        #      Configuration:
        #        # TODO set LOGGING_LEVEL to info
        #        FunctionName: !Ref CleanupLambda
        #        UserParameters: !Sub
        #          - |
        #            {
        #              "StaticSiteFiles": "${bucketName}"
        #            }
        #          -
        #            bucketName:
        #              Fn::ImportValue: !Sub "${ProjectSlug}-StaticSiteFilesBucketName"
        #      RunOrder: 1

  CloudFrontStaging:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: >
          Staging distribution with no caching set. Uses the green version only.
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: "yellow"
          # Managed-CachingDisabled
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          -
            Id: "yellow"
            CustomOriginConfig:
              # The S3 static website is only accessible via http
              OriginProtocolPolicy: http-only
            DomainName: !Sub
              - "${bucketName}.s3-website-${AWS::Region}.amazonaws.com"
              -
                bucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/stage/yellow"

#  CleanupLambda:
#    Type: "AWS::Serverless::Function"
#    Properties:
#      Description: >
#        Delete old objects in S3 bucket that are no longer needed.
#
#        Will also update the error.html to the most recent green version.
#      Handler: "llama.handler"
#      Runtime: python3.8
#      CodeUri: cleanup/.
#      Role:
#        Fn::ImportValue: !Sub "${ProjectSlug}-BuildAndDeployRoleArn"
#      Timeout: 5
#
#  #CleanupLambdaLibs:
#  #  Type: "AWS::Serverless::LayerVersion"
#  #  Properties:
#  #    LayerName: CleanupPythonLayer
#  #    Description: |
#  #      Dependencies for the CleanupLambda
#  #    ContentUri: package/.
#  #    CompatibleRuntimes:
#  #      - python3.8
#Outputs:
#  # TODO: temporary to get around validation error since not currently using the
#  # parameter.
#  tmp:
#    Value: !Ref SecretHeaderString
