AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: >
  Support CI/CD for weboftomorrow.

Metadata:
  Author: Jake Hickenlooper

Parameters:

  ProjectSlug:
    Type: String
    Description: Should not change. See build-change-set.cfn.yaml
    Default: "weboftomorrow"
    AllowedValues:
      - "weboftomorrow"

  GitHubCloneURL:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/weboftomorrow/github-clone-url"
    AllowedValues:
      - "/weboftomorrow/github-clone-url"
    Description: >
      The https clone URL for the project.

  ManualVerificationEmail:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/weboftomorrow/manual-verification-email"
    AllowedValues:
      - "/weboftomorrow/manual-verification-email"
    Description: >
      Email address to send a notification to when the staging site needs to be
      manually verified.

  SecretHeaderString:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/weboftomorrow/secret-header-string"
    AllowedValues:
      - "/weboftomorrow/secret-header-string"
    Description: >
      Secret string in the Referer header that CloudFront will use when
      accessing files from the S3 bucket. This blocks direct public access of
      the static sites bucket unless the Referer header with this string is
      used.

  GitBranchToBuildFrom:
    Type: String
    Default: "release"
    Description: >
      This is the branch that will be checked out when building the static.zip.
      It is also used when running the code build integration spec.
  PatternToTriggerBuild:
    Type: String
    Default: "^refs/heads/release"
    Description: >
      Set the git branch or tags pattern that will trigger a build.

  FileCountThresholdForCacheInvalidations:
    Type: Number
    Default: 20
  CacheControlForTheme:
    Type: String
    Default: "max-age=31536000"
  CacheControlForMedia:
    Type: String
    Default: "max-age=1200, s-maxage=31536000"
  CacheControlForIndexHTML:
    Type: String
    Default: "max-age=0, s-maxage=1200"
  CacheControlDefault:
    Type: String
    Default: "max-age=300, s-maxage=31536000"

  LoggingLevel:
    Type: String
    Default: "INFO"
    AllowedValues:
      - "DEBUG"
      - "INFO"
      - "WARNING"

Resources:
  #TODO: move AmazonCloudWatchEventRole to root stack?
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub "${ProjectSlug}-cwe-pipeline-execution"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${StaticPipeline}"

  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              -
                Fn::ImportValue: "root-ArtifactBucket"
            key:
              - !Sub "${ProjectSlug}/StaticBuild/static.zip"
      Targets:
        -
          Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${StaticPipeline}"
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: !Sub "${ProjectSlug}-codepipeline-AppPipeline"

  StaticBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: "StaticBuild"
      Artifacts:
        Type: S3
        Location:
          Fn::ImportValue: "root-ArtifactBucket"
        Path: !Ref ProjectSlug
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticBuild"
          Status: ENABLED
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: GIT_BRANCH
            Type: PLAINTEXT
            Value: !Ref GitBranchToBuildFrom
      QueuedTimeoutInMinutes: 10
      ServiceRole:
        Fn::ImportValue: root-weboftomorrowStaticBuildRoleArn
      Source:
        Auth:
          Type: OAUTH
        # GitCloneDepth set to 0 to support git submodule checkout
        GitCloneDepth: 0
        Location: !Ref GitHubCloneURL
        Type: GITHUB
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true
        FilterGroups:
          -
            -
              Type: EVENT
              Pattern: PUSH
              ExcludeMatchedPattern: false
            -
              ExcludeMatchedPattern: false
              Pattern: !Ref PatternToTriggerBuild
              Type: HEAD_REF

  StaticPatch:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-StaticPatch"
      Description: >
        Directly patch the S3 production files and invalidate any CloudFront
        cache for files that have changed.
      ServiceRole:
        Fn::ImportValue: "root-weboftomorrowS3UpdateWebsiteProductionRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: PROJECT_SLUG
            Type: PLAINTEXT
            Value: !Ref ProjectSlug
          -
            Name: FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS
            Type: PLAINTEXT
            Value: !Ref FileCountThresholdForCacheInvalidations
          -
            Name: STATIC_SITE_FILES_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-StaticWebsiteBucket"
          -
            Name: CACHE_CONTROL_FOR_THEME
            Type: PLAINTEXT
            Value: !Ref CacheControlForTheme
          -
            Name: CACHE_CONTROL_FOR_MEDIA
            Type: PLAINTEXT
            Value: !Ref CacheControlForMedia
          -
            Name: CACHE_CONTROL_FOR_INDEX_HTML
            Type: PLAINTEXT
            Value: !Ref CacheControlForIndexHTML
          -
            Name: CACHE_CONTROL_DEFAULT
            Type: PLAINTEXT
            Value: !Ref CacheControlDefault
          -
            Name: ARTIFACT_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-ArtifactBucket"
          -
            Name: CLOUDFRONT_PRODUCTION
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                Fn::Sub: "${ProjectSlug}-CloudFrontProduction"
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticPatch"
          Status: ENABLED
      QueuedTimeoutInMinutes: 10
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            variables:
              STATIC_SITE_FILES_BUCKET: ""
          phases:
            build:
              commands:
                - aws --version
                - |
                    aws s3 cp \
                      s3://${ARTIFACT_BUCKET}/${PROJECT_SLUG}/StaticBuild/parameters.json \
                      parameters.json
                - BLUE_VERSION=$(jq -r '.[] | select(.ParameterKey == "BlueVersion") | .ParameterValue' parameters.json)
                - GREEN_VERSION=$(jq -r '.[] | select(.ParameterKey == "GreenVersion") | .ParameterValue' parameters.json)
                - |
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/ \
                      current \
                      --recursive \
                      --no-progress
                - cp -r current new
                - |
                    (
                      cd current
                      # Limit to just files that will rely on cache
                      # invalidations.  This will exclude theme, media, and any
                      # index.html, notfound.html, error.html, and maintenance.html files.
                      find ./* -maxdepth 0 ! -path ./media ! -path ./theme | xargs -I {} find {} -type f ! -name notfound.html ! -name error.html ! -name maintenance.html ! -name index.html | xargs md5sum > ../current_checksums
                    )
                # Get the patch file.
                - |
                    aws s3 cp \
                      s3://${ARTIFACT_BUCKET}/${PROJECT_SLUG}/StaticBuild/static.patch \
                      static.patch \
                      --no-progress
                # Apply the patch locally to the new directory, create the
                # changed-files.txt by doing a md5sum check.
                - |
                    (
                      cd new
                      patch --no-backup-if-mismatch --remove-empty-files --force -r - --silent -p1 < ../static.patch
                      # TODO: Verify that files that have been removed are not added to the changed-files.txt.
                      md5sum --check --quiet --ignore-missing ../current_checksums 2> /dev/null | sed -E 's#\./(.+): FAILED$#/\1#' > ../changed-files.txt
                    )
                # Deploy the new patched green version and make the old green
                # version the blue version. Use orange to preserve the metadata
                # like Cache-Control headers.
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION} \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION} \
                      --no-progress \
                      --delete
                    aws s3 sync \
                      new/theme \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange/theme \
                      --cache-control "${CACHE_CONTROL_FOR_THEME}" \
                      --metadata-directive REPLACE \
                      --no-progress \
                      --delete
                    aws s3 sync \
                      new/media \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange/media \
                      --cache-control "${CACHE_CONTROL_FOR_MEDIA}" \
                      --metadata-directive REPLACE \
                      --no-progress \
                      --delete
                    aws s3 sync \
                      new \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      --cache-control "${CACHE_CONTROL_FOR_INDEX_HTML}" \
                      --metadata-directive REPLACE \
                      --exclude "*" \
                      --include "*/index.html" \
                      --include "index.html" \
                      --include "notfound.html" \
                      --include "error.html" \
                      --include "maintenance.html" \
                      --no-progress \
                      --delete
                    aws s3 sync \
                      new \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      --cache-control "${CACHE_CONTROL_DEFAULT}" \
                      --metadata-directive REPLACE \
                      --exclude "theme" \
                      --exclude "media" \
                      --exclude "*/index.html" \
                      --exclude "index.html" \
                      --exclude "notfound.html" \
                      --exclude "error.html" \
                      --exclude "maintenance.html" \
                      --no-progress \
                      --delete
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION} \
                      --no-progress \
                      --delete
                # Create the invalidations for this deployment (skip if no
                # changed files).
                # Don't rely on cache invalidation for deployments.
                # Only root files which rarely change and can't have cache-busting URLs should rely
                # on cache invalidations. These would be favicon.ico,
                # robots.txt, humans.txt and such.
                - |
                    CHANGED_FILE_COUNT=$(wc -l changed-files.txt | cut -d ' ' -f1)
                    if [ $CHANGED_FILE_COUNT -gt $FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS ]; then
                      echo "Changed file count of $CHANGED_FILE_COUNT has passed the $FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS threshold; invalidating all paths (/*)"
                      head -n100 changed-files.txt
                      if [ $CHANGED_FILE_COUNT -gt 100 ]; then
                        echo "...plus $(($CHANGED_FILE_COUNT - 100)) more files."
                      fi
                      aws cloudfront create-invalidation \
                        --distribution-id $CLOUDFRONT_PRODUCTION \
                        --paths '/*';
                    elif [ $CHANGED_FILE_COUNT -eq 0 ]; then
                      echo "No changed files. Skipping cache invalidation creation."
                    else
                      echo "Creating a cache invalidation for the below files:"
                      cat changed-files.txt
                      jq --raw-input --null-input --raw-output \
                        --arg caller_reference $CODEBUILD_BUILD_ID \
                        --arg file_count $CHANGED_FILE_COUNT \
                        '[inputs] | {
                          CallerReference: $caller_reference,
                          Paths: {
                            Quantity: $file_count | tonumber,
                            Items: .
                          }
                        }' changed-files.txt > invalidations.json
                      aws cloudfront create-invalidation \
                        --distribution-id $CLOUDFRONT_PRODUCTION \
                        --invalidation-batch file://invalidations.json
                    fi
                # Update the maintenance.html, notfound.html, and error.html
                # file that will be used. Copies from green to blue since the
                # blue-green-failover will use the blue version for missing
                # paths.
                - |
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/error.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/error.html
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/notfound.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/notfound.html
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/maintenance.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/maintenance.html
                # Set the new green version file for use by future updates
                - echo "${GREEN_VERSION}" > NG
                - |
                  aws s3 cp \
                    NG \
                    s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/GREEN_VERSION
      TimeoutInMinutes: 10

  StaticTest:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-StaticTest"
      ServiceRole:
        Fn::ImportValue: "root-weboftomorrowStaticTestRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: STAGING_URL
            Type: PLAINTEXT
            Value: !Sub "https://${CloudFrontStaging.DomainName}"
          -
            Name: GIT_BRANCH
            Type: PLAINTEXT
            Value: !Ref GitBranchToBuildFrom
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-integration.yml
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-StaticTest"
          Status: ENABLED

  SyncGreenToBlue:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-SyncGreenToBlue"
      ServiceRole:
        Fn::ImportValue: "root-weboftomorrowS3UpdateWebsiteProductionRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: PROJECT_SLUG
            Type: PLAINTEXT
            Value: !Ref ProjectSlug
          -
            Name: STATIC_SITE_FILES_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-StaticWebsiteBucket"
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            variables:
              STATIC_SITE_FILES_BUCKET: ""
          phases:
            build:
              commands:
                - aws --version
                - BLUE_VERSION=$(jq -r '.[] | select(.ParameterKey == "BlueVersion") | .ParameterValue' parameters.json)
                - GREEN_VERSION=$(jq -r '.[] | select(.ParameterKey == "GreenVersion") | .ParameterValue' parameters.json)
                # Get the old green version if there is one; otherwise use new BLUE_VERSION
                - >
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/GREEN_VERSION \
                      OG \
                      || echo "${BLUE_VERSION}" > OG
                - OLD_GREEN_VERSION=$(cat OG)
                - echo $OLD_GREEN_VERSION
                # sync old green version to new blue version (if different)
                - >
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${OLD_GREEN_VERSION} \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}
                # sync old green version to new green version (if different)
                - >
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${OLD_GREEN_VERSION} \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-SyncGreenToBlue"
          Status: ENABLED

  DeployGreenVersion:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub "${ProjectSlug}-DeployGreenVersion"
      ServiceRole:
        Fn::ImportValue: "root-weboftomorrowS3UpdateWebsiteProductionRoleArn"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: CODEBUILD
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Name: PROJECT_SLUG
            Type: PLAINTEXT
            Value: !Ref ProjectSlug
          -
            Name: FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS
            Type: PLAINTEXT
            Value: !Ref FileCountThresholdForCacheInvalidations
          -
            Name: STATIC_SITE_FILES_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue: "root-StaticWebsiteBucket"
          -
            Name: CLOUDFRONT_PRODUCTION
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                Fn::Sub: "${ProjectSlug}-CloudFrontProduction"
          -
            Name: CACHE_CONTROL_FOR_THEME
            Type: PLAINTEXT
            Value: !Ref CacheControlForTheme
          -
            Name: CACHE_CONTROL_FOR_MEDIA
            Type: PLAINTEXT
            Value: !Ref CacheControlForMedia
          -
            Name: CACHE_CONTROL_FOR_INDEX_HTML
            Type: PLAINTEXT
            Value: !Ref CacheControlForIndexHTML
          -
            Name: CACHE_CONTROL_DEFAULT
            Type: PLAINTEXT
            Value: !Ref CacheControlDefault
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
            variables:
              STATIC_SITE_FILES_BUCKET: ""
          phases:
            build:
              commands:
                - aws --version
                - BLUE_VERSION=$(jq -r '.[] | select(.ParameterKey == "BlueVersion") | .ParameterValue' parameters.json)
                - GREEN_VERSION=$(jq -r '.[] | select(.ParameterKey == "GreenVersion") | .ParameterValue' parameters.json)
                - SOURCE_VERSION=$(jq -r '.version' package.json)
                - TMP_DIR=$(mktemp -d)
                # Create the list of changed files by checking the
                # yellow_checksums file with what is in green version.
                - |

                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      $TMP_DIR/yellow \
                      --recursive \
                      --no-progress
                    (
                      cd $TMP_DIR/yellow
                      # Limit to just files that will rely on cache
                      # invalidations.  This will exclude theme, media, and any
                      # index.html, notfound.html, error.html, and maintenance.html files.
                      find ./* -maxdepth 0 ! -path ./media ! -path ./theme | xargs -I {} find {} -type f ! -name notfound.html ! -name error.html ! -name maintenance.html ! -name index.html | xargs md5sum > ../current_checksums

                    )
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION} \
                      $TMP_DIR/green \
                      --recursive \
                      --no-progress
                    (
                      cd $TMP_DIR/green
                      md5sum --check --quiet --ignore-missing $TMP_DIR/yellow_checksums 2> /dev/null | sed -E 's#(.+): FAILED$#/\1#' > $TMP_DIR/changed-files.txt
                    )
                # Sync deployed version to new green version and delete old
                # existing files in destination if not in source.  Using
                # a holding directory (orange) to store the metadata and such
                # after it is synced from yellow. The orange directory is then
                # synced to the green version in one transaction.
                # Use max-age of a year on any files in theme directory since
                # they all have the version as part of the path.
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow/theme \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange/theme \
                      --cache-control "${CACHE_CONTROL_FOR_THEME}" \
                      --metadata-directive REPLACE \
                      --no-progress \
                      --delete
                # Use max-age of 20 minutes (average time a visitor might be on
                # the site) and shared max-age of a year for media files.  The
                # media/* path will use cache invalidations to refresh. Using
                # a longer max-age since it is more likely these don't change
                # often.
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow/media \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange/media \
                      --cache-control "${CACHE_CONTROL_FOR_MEDIA}" \
                      --metadata-directive REPLACE \
                      --no-progress \
                      --delete
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      --cache-control "${CACHE_CONTROL_FOR_INDEX_HTML}" \
                      --metadata-directive REPLACE \
                      --exclude "*" \
                      --include "*/index.html" \
                      --include "index.html" \
                      --include "notfound.html" \
                      --include "error.html" \
                      --include "maintenance.html" \
                      --no-progress \
                      --delete
                # For all other files which will mostly be index.html files set
                # the max-age to 5 minutes for visitor cache and shared max-age
                # to a year. Will use invalidations to refresh.
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      --cache-control "${CACHE_CONTROL_DEFAULT}" \
                      --metadata-directive REPLACE \
                      --exclude "theme" \
                      --exclude "media" \
                      --exclude "*/index.html" \
                      --exclude "index.html" \
                      --exclude "notfound.html" \
                      --exclude "error.html" \
                      --exclude "maintenance.html" \
                      --no-progress \
                      --delete
                # Sync the updated orange to green version
                - |
                    aws s3 sync \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/orange \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION} \
                      --no-progress \
                      --delete
                # Create the invalidations for this deployment (skip if no
                # changed files).
                - |
                    CHANGED_FILE_COUNT=$(wc -l $TMP_DIR/changed-files.txt | cut -d ' ' -f1)
                    if [ $CHANGED_FILE_COUNT -gt $FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS ]; then
                      echo "Changed file count of $CHANGED_FILE_COUNT has passed the $FILE_COUNT_THRESHOLD_FOR_CACHE_INVALIDATIONS threshold; invalidating all paths (/*)"
                      head -n100 $TMP_DIR/changed-files.txt
                      if [ $CHANGED_FILE_COUNT -gt 100 ]; then
                        echo "...plus $(($CHANGED_FILE_COUNT - 100)) more files."
                      fi
                      aws cloudfront create-invalidation \
                        --distribution-id $CLOUDFRONT_PRODUCTION \
                        --paths '/*';
                    elif [ $CHANGED_FILE_COUNT -eq 0 ]; then
                      echo "No changed files. Skipping cache invalidation creation."
                    else
                      echo "Creating a cache invalidation for the below files:"
                      cat $TMP_DIR/changed-files.txt
                      jq --raw-input --null-input --raw-output \
                        --arg caller_reference $CODEBUILD_BUILD_ID \
                        --arg file_count $CHANGED_FILE_COUNT \
                        '[inputs] | {
                          CallerReference: $caller_reference,
                          Paths: {
                            Quantity: $file_count | tonumber,
                            Items: .
                          }
                        }' $TMP_DIR/changed-files.txt > $TMP_DIR/invalidations.json
                      aws cloudfront create-invalidation \
                        --distribution-id $CLOUDFRONT_PRODUCTION \
                        --invalidation-batch file://$TMP_DIR/invalidations.json
                    fi
                # Update the maintenance.html, notfound.html, and error.html
                # file that will be used. Copies from green to blue since the
                # blue-green-failover will use the blue version for missing
                # paths.
                - |
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/error.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/error.html
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/notfound.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/notfound.html
                    aws s3 cp \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${GREEN_VERSION}/maintenance.html \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/${BLUE_VERSION}/maintenance.html
                # Set the new green version file for use by future updates
                - echo "${GREEN_VERSION}" > NG
                - |
                  aws s3 cp \
                    NG \
                    s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/GREEN_VERSION
                # Clean up by removing yellow
                - |
                    aws s3 rm \
                      s3://${STATIC_SITE_FILES_BUCKET}/${PROJECT_SLUG}/production/yellow \
                      --recursive \
                      --only-show-errors
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub "${ProjectSlug}-DeployGreenVersion"
          Status: ENABLED

  ManualVerificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      #DisplayName: !Sub "${ProjectSlug}-ManualVerificationTopic"
      Subscription:
        -
          Protocol: email
          Endpoint: !Ref ManualVerificationEmail

  StaticPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue: "root-PipelineBucket"
      Name: !Ref ProjectSlug
      RoleArn:
        Fn::ImportValue: "root-weboftomorrowStaticPipelineRoleArn"
      Stages:
        -
          Name: Source
          Actions:
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                # static.zip here is the GreenVersion
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/static.zip"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact"
              OutputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/source.zip"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact-source"
              OutputArtifacts:
                - Name: sourceZip
              RunOrder: 2
            -
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket:
                  Fn::ImportValue: "root-ArtifactBucket"
                S3ObjectKey: !Sub "${ProjectSlug}/StaticBuild/parameters.json"
                PollForSourceChanges: false
              Name: "StaticBuild-artifact-parameters"
              OutputArtifacts:
                - Name: parametersJSON
              RunOrder: 2
        -
          Name: Stage
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
                ObjectKey: !Sub "${ProjectSlug}/stage"
                Extract: true
              Name: "StaticBuild-stage"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref StaticTest
              Name: "StaticTest-stage"
              InputArtifacts:
                - Name: sourceZip
              RunOrder: 2
            -
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Configuration:
                CustomData: |
                  Review the staging website before pushing change to
                  production.
                ExternalEntityLink: !Sub "https://${CloudFrontStaging.DomainName}"
                NotificationArn: !Ref ManualVerificationTopic
              Name: "approval-stage"
              RunOrder: 3
        -
          Name: Prep
          Actions:
            -
              Name: "SyncGreenToBlue"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: sourceZip
              Configuration:
                ProjectName: !Ref SyncGreenToBlue
              RunOrder: 1
        -
          Name: Deploy
          Actions:
            -
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
                ObjectKey: !Sub "${ProjectSlug}/production"
                Extract: true
              Name: "StaticBuild-deploy"
              InputArtifacts:
                - Name: staticZip
              RunOrder: 1
            -
              Name: "StaticBuild-deploy-version"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: sourceZip
              Configuration:
                ProjectName: !Ref DeployGreenVersion
              RunOrder: 2
        -
          Name: Cleanup
          Actions:
            -
              Name: "Cleanup-Lambda"
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              InputArtifacts:
                - Name: sourceZip
                - Name: staticZip
                - Name: parametersJSON
              Configuration:
                FunctionName: !Ref CleanupLambda
                UserParameters: !Sub
                  - |
                    {
                      "StaticSiteFiles": "${bucketName}",
                      "ProjectSlug": "${ProjectSlug}"
                    }
                  -
                    bucketName:
                      Fn::ImportValue: "root-StaticWebsiteBucket"
              RunOrder: 1

  CloudFrontStaging:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: >
          weboftomorrow staging green only
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: "yellow"
          # Managed-CachingDisabled
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          -
            Id: "yellow"
            CustomOriginConfig:
              # The S3 static website is only accessible via http
              OriginProtocolPolicy: http-only
            DomainName: !Sub
              - "${bucketName}.s3-website-${AWS::Region}.amazonaws.com"
              -
                bucketName:
                  Fn::ImportValue: "root-StaticWebsiteBucket"
            OriginCustomHeaders:
              -
                HeaderName: Referer
                HeaderValue: !Ref SecretHeaderString
            OriginPath: !Sub "/${ProjectSlug}/stage/yellow"

  CleanupLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: >
        Delete old objects in S3 bucket that are no longer needed.
      Handler: "llama.handler"
      Runtime: python3.8
      CodeUri: cleanup/.
      Role:
        Fn::ImportValue: "root-weboftomorrowS3UpdateWebsiteProductionRoleArn"
      Timeout: 5
      Environment:
        Variables:
          LOGGING_LEVEL: !Ref LoggingLevel

  # When the CleanupLambda cleanup/requirements.txt has any actual dependencies listed.
  #CleanupLambdaLibs:
  #  Type: "AWS::Serverless::LayerVersion"
  #  Properties:
  #    LayerName: CleanupPythonLayer
  #    Description: |
  #      Dependencies for the CleanupLambda
  #    ContentUri: package/.
  #    CompatibleRuntimes:
  #      - python3.8
